<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.injured.server.provider.mapper.InjuredDamagesiteMapper">
  <resultMap id="BaseResultMap" type="com.injured.server.api.entity.InjuredDamagesite">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="dict_code" jdbcType="VARCHAR" property="dictCode" />
    <result column="dict_name" jdbcType="VARCHAR" property="dictName" />
    <result column="untreated_medical" jdbcType="DECIMAL" property="untreatedMedical" />
    <result column="untreated_renewal_fee" jdbcType="DECIMAL" property="untreatedRenewalFee" />
    <result column="renewal_fee" jdbcType="DECIMAL" property="renewalFee" />
    <result column="traffic_days" jdbcType="DECIMAL" property="trafficDays" />
    <result column="income_days" jdbcType="DECIMAL" property="incomeDays" />
    <result column="nursing_days" jdbcType="DECIMAL" property="nursingDays" />
    <result column="nutrition_days" jdbcType="DECIMAL" property="nutritionDays" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, dict_code, dict_name, untreated_medical, untreated_renewal_fee, renewal_fee, 
    traffic_days, income_days, nursing_days, nutrition_days
  </sql>
  <select id="selectByExample" parameterType="com.injured.server.api.entity.InjuredDamagesiteExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from injured_damagesite
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from injured_damagesite
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from injured_damagesite
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.injured.server.api.entity.InjuredDamagesiteExample">
    delete from injured_damagesite
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.injured.server.api.entity.InjuredDamagesite">
    insert into injured_damagesite (id, dict_code, dict_name, 
      untreated_medical, untreated_renewal_fee, 
      renewal_fee, traffic_days, income_days, 
      nursing_days, nutrition_days)
    values (#{id,jdbcType=BIGINT}, #{dictCode,jdbcType=VARCHAR}, #{dictName,jdbcType=VARCHAR}, 
      #{untreatedMedical,jdbcType=DECIMAL}, #{untreatedRenewalFee,jdbcType=DECIMAL}, 
      #{renewalFee,jdbcType=DECIMAL}, #{trafficDays,jdbcType=DECIMAL}, #{incomeDays,jdbcType=DECIMAL}, 
      #{nursingDays,jdbcType=DECIMAL}, #{nutritionDays,jdbcType=DECIMAL})
  </insert>
  <insert id="insertSelective" parameterType="com.injured.server.api.entity.InjuredDamagesite">
    insert into injured_damagesite
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="dictCode != null">
        dict_code,
      </if>
      <if test="dictName != null">
        dict_name,
      </if>
      <if test="untreatedMedical != null">
        untreated_medical,
      </if>
      <if test="untreatedRenewalFee != null">
        untreated_renewal_fee,
      </if>
      <if test="renewalFee != null">
        renewal_fee,
      </if>
      <if test="trafficDays != null">
        traffic_days,
      </if>
      <if test="incomeDays != null">
        income_days,
      </if>
      <if test="nursingDays != null">
        nursing_days,
      </if>
      <if test="nutritionDays != null">
        nutrition_days,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="dictCode != null">
        #{dictCode,jdbcType=VARCHAR},
      </if>
      <if test="dictName != null">
        #{dictName,jdbcType=VARCHAR},
      </if>
      <if test="untreatedMedical != null">
        #{untreatedMedical,jdbcType=DECIMAL},
      </if>
      <if test="untreatedRenewalFee != null">
        #{untreatedRenewalFee,jdbcType=DECIMAL},
      </if>
      <if test="renewalFee != null">
        #{renewalFee,jdbcType=DECIMAL},
      </if>
      <if test="trafficDays != null">
        #{trafficDays,jdbcType=DECIMAL},
      </if>
      <if test="incomeDays != null">
        #{incomeDays,jdbcType=DECIMAL},
      </if>
      <if test="nursingDays != null">
        #{nursingDays,jdbcType=DECIMAL},
      </if>
      <if test="nutritionDays != null">
        #{nutritionDays,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.injured.server.api.entity.InjuredDamagesiteExample" resultType="java.lang.Long">
    select count(*) from injured_damagesite
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update injured_damagesite
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.dictCode != null">
        dict_code = #{record.dictCode,jdbcType=VARCHAR},
      </if>
      <if test="record.dictName != null">
        dict_name = #{record.dictName,jdbcType=VARCHAR},
      </if>
      <if test="record.untreatedMedical != null">
        untreated_medical = #{record.untreatedMedical,jdbcType=DECIMAL},
      </if>
      <if test="record.untreatedRenewalFee != null">
        untreated_renewal_fee = #{record.untreatedRenewalFee,jdbcType=DECIMAL},
      </if>
      <if test="record.renewalFee != null">
        renewal_fee = #{record.renewalFee,jdbcType=DECIMAL},
      </if>
      <if test="record.trafficDays != null">
        traffic_days = #{record.trafficDays,jdbcType=DECIMAL},
      </if>
      <if test="record.incomeDays != null">
        income_days = #{record.incomeDays,jdbcType=DECIMAL},
      </if>
      <if test="record.nursingDays != null">
        nursing_days = #{record.nursingDays,jdbcType=DECIMAL},
      </if>
      <if test="record.nutritionDays != null">
        nutrition_days = #{record.nutritionDays,jdbcType=DECIMAL},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update injured_damagesite
    set id = #{record.id,jdbcType=BIGINT},
      dict_code = #{record.dictCode,jdbcType=VARCHAR},
      dict_name = #{record.dictName,jdbcType=VARCHAR},
      untreated_medical = #{record.untreatedMedical,jdbcType=DECIMAL},
      untreated_renewal_fee = #{record.untreatedRenewalFee,jdbcType=DECIMAL},
      renewal_fee = #{record.renewalFee,jdbcType=DECIMAL},
      traffic_days = #{record.trafficDays,jdbcType=DECIMAL},
      income_days = #{record.incomeDays,jdbcType=DECIMAL},
      nursing_days = #{record.nursingDays,jdbcType=DECIMAL},
      nutrition_days = #{record.nutritionDays,jdbcType=DECIMAL}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.injured.server.api.entity.InjuredDamagesite">
    update injured_damagesite
    <set>
      <if test="dictCode != null">
        dict_code = #{dictCode,jdbcType=VARCHAR},
      </if>
      <if test="dictName != null">
        dict_name = #{dictName,jdbcType=VARCHAR},
      </if>
      <if test="untreatedMedical != null">
        untreated_medical = #{untreatedMedical,jdbcType=DECIMAL},
      </if>
      <if test="untreatedRenewalFee != null">
        untreated_renewal_fee = #{untreatedRenewalFee,jdbcType=DECIMAL},
      </if>
      <if test="renewalFee != null">
        renewal_fee = #{renewalFee,jdbcType=DECIMAL},
      </if>
      <if test="trafficDays != null">
        traffic_days = #{trafficDays,jdbcType=DECIMAL},
      </if>
      <if test="incomeDays != null">
        income_days = #{incomeDays,jdbcType=DECIMAL},
      </if>
      <if test="nursingDays != null">
        nursing_days = #{nursingDays,jdbcType=DECIMAL},
      </if>
      <if test="nutritionDays != null">
        nutrition_days = #{nutritionDays,jdbcType=DECIMAL},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.injured.server.api.entity.InjuredDamagesite">
    update injured_damagesite
    set dict_code = #{dictCode,jdbcType=VARCHAR},
      dict_name = #{dictName,jdbcType=VARCHAR},
      untreated_medical = #{untreatedMedical,jdbcType=DECIMAL},
      untreated_renewal_fee = #{untreatedRenewalFee,jdbcType=DECIMAL},
      renewal_fee = #{renewalFee,jdbcType=DECIMAL},
      traffic_days = #{trafficDays,jdbcType=DECIMAL},
      income_days = #{incomeDays,jdbcType=DECIMAL},
      nursing_days = #{nursingDays,jdbcType=DECIMAL},
      nutrition_days = #{nutritionDays,jdbcType=DECIMAL}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>