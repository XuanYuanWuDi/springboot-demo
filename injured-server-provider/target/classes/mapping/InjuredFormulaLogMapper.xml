<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.injured.server.provider.mapper.InjuredFormulaLogMapper">
  <resultMap id="BaseResultMap" type="com.injured.server.api.entity.InjuredFormulaLog">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="regist_id" jdbcType="BIGINT" property="registId" />
    <result column="claim_notification_no" jdbcType="VARCHAR" property="claimNotificationNo" />
    <result column="company_id" jdbcType="BIGINT" property="companyId" />
    <result column="fast_info_id" jdbcType="BIGINT" property="fastInfoId" />
    <result column="damage_name" jdbcType="VARCHAR" property="damageName" />
    <result column="damage_no" jdbcType="VARCHAR" property="damageNo" />
    <result column="medical_fee" jdbcType="DECIMAL" property="medicalFee" />
    <result column="renewal_fee" jdbcType="DECIMAL" property="renewalFee" />
    <result column="nutrition_fee" jdbcType="DECIMAL" property="nutritionFee" />
    <result column="income_fee" jdbcType="DECIMAL" property="incomeFee" />
    <result column="nursing_fee" jdbcType="DECIMAL" property="nursingFee" />
    <result column="traffic_fee" jdbcType="DECIMAL" property="trafficFee" />
    <result column="sum_fee" jdbcType="DECIMAL" property="sumFee" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="is_deleted" jdbcType="TINYINT" property="isDeleted" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, regist_id, claim_notification_no, company_id, fast_info_id, damage_name, damage_no, 
    medical_fee, renewal_fee, nutrition_fee, income_fee, nursing_fee, traffic_fee, sum_fee, 
    create_time, update_time, is_deleted, remark
  </sql>
  <select id="selectByExample" parameterType="com.injured.server.api.entity.InjuredFormulaLogExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from injured_formula_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from injured_formula_log
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from injured_formula_log
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.injured.server.api.entity.InjuredFormulaLogExample">
    delete from injured_formula_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.injured.server.api.entity.InjuredFormulaLog">
    insert into injured_formula_log (id, regist_id, claim_notification_no, 
      company_id, fast_info_id, damage_name, 
      damage_no, medical_fee, renewal_fee, 
      nutrition_fee, income_fee, nursing_fee, 
      traffic_fee, sum_fee, create_time, 
      update_time, is_deleted, remark
      )
    values (#{id,jdbcType=BIGINT}, #{registId,jdbcType=BIGINT}, #{claimNotificationNo,jdbcType=VARCHAR}, 
      #{companyId,jdbcType=BIGINT}, #{fastInfoId,jdbcType=BIGINT}, #{damageName,jdbcType=VARCHAR}, 
      #{damageNo,jdbcType=VARCHAR}, #{medicalFee,jdbcType=DECIMAL}, #{renewalFee,jdbcType=DECIMAL}, 
      #{nutritionFee,jdbcType=DECIMAL}, #{incomeFee,jdbcType=DECIMAL}, #{nursingFee,jdbcType=DECIMAL}, 
      #{trafficFee,jdbcType=DECIMAL}, #{sumFee,jdbcType=DECIMAL}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{isDeleted,jdbcType=TINYINT}, #{remark,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.injured.server.api.entity.InjuredFormulaLog">
    insert into injured_formula_log
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="registId != null">
        regist_id,
      </if>
      <if test="claimNotificationNo != null">
        claim_notification_no,
      </if>
      <if test="companyId != null">
        company_id,
      </if>
      <if test="fastInfoId != null">
        fast_info_id,
      </if>
      <if test="damageName != null">
        damage_name,
      </if>
      <if test="damageNo != null">
        damage_no,
      </if>
      <if test="medicalFee != null">
        medical_fee,
      </if>
      <if test="renewalFee != null">
        renewal_fee,
      </if>
      <if test="nutritionFee != null">
        nutrition_fee,
      </if>
      <if test="incomeFee != null">
        income_fee,
      </if>
      <if test="nursingFee != null">
        nursing_fee,
      </if>
      <if test="trafficFee != null">
        traffic_fee,
      </if>
      <if test="sumFee != null">
        sum_fee,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="isDeleted != null">
        is_deleted,
      </if>
      <if test="remark != null">
        remark,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="registId != null">
        #{registId,jdbcType=BIGINT},
      </if>
      <if test="claimNotificationNo != null">
        #{claimNotificationNo,jdbcType=VARCHAR},
      </if>
      <if test="companyId != null">
        #{companyId,jdbcType=BIGINT},
      </if>
      <if test="fastInfoId != null">
        #{fastInfoId,jdbcType=BIGINT},
      </if>
      <if test="damageName != null">
        #{damageName,jdbcType=VARCHAR},
      </if>
      <if test="damageNo != null">
        #{damageNo,jdbcType=VARCHAR},
      </if>
      <if test="medicalFee != null">
        #{medicalFee,jdbcType=DECIMAL},
      </if>
      <if test="renewalFee != null">
        #{renewalFee,jdbcType=DECIMAL},
      </if>
      <if test="nutritionFee != null">
        #{nutritionFee,jdbcType=DECIMAL},
      </if>
      <if test="incomeFee != null">
        #{incomeFee,jdbcType=DECIMAL},
      </if>
      <if test="nursingFee != null">
        #{nursingFee,jdbcType=DECIMAL},
      </if>
      <if test="trafficFee != null">
        #{trafficFee,jdbcType=DECIMAL},
      </if>
      <if test="sumFee != null">
        #{sumFee,jdbcType=DECIMAL},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isDeleted != null">
        #{isDeleted,jdbcType=TINYINT},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.injured.server.api.entity.InjuredFormulaLogExample" resultType="java.lang.Long">
    select count(*) from injured_formula_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update injured_formula_log
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.registId != null">
        regist_id = #{record.registId,jdbcType=BIGINT},
      </if>
      <if test="record.claimNotificationNo != null">
        claim_notification_no = #{record.claimNotificationNo,jdbcType=VARCHAR},
      </if>
      <if test="record.companyId != null">
        company_id = #{record.companyId,jdbcType=BIGINT},
      </if>
      <if test="record.fastInfoId != null">
        fast_info_id = #{record.fastInfoId,jdbcType=BIGINT},
      </if>
      <if test="record.damageName != null">
        damage_name = #{record.damageName,jdbcType=VARCHAR},
      </if>
      <if test="record.damageNo != null">
        damage_no = #{record.damageNo,jdbcType=VARCHAR},
      </if>
      <if test="record.medicalFee != null">
        medical_fee = #{record.medicalFee,jdbcType=DECIMAL},
      </if>
      <if test="record.renewalFee != null">
        renewal_fee = #{record.renewalFee,jdbcType=DECIMAL},
      </if>
      <if test="record.nutritionFee != null">
        nutrition_fee = #{record.nutritionFee,jdbcType=DECIMAL},
      </if>
      <if test="record.incomeFee != null">
        income_fee = #{record.incomeFee,jdbcType=DECIMAL},
      </if>
      <if test="record.nursingFee != null">
        nursing_fee = #{record.nursingFee,jdbcType=DECIMAL},
      </if>
      <if test="record.trafficFee != null">
        traffic_fee = #{record.trafficFee,jdbcType=DECIMAL},
      </if>
      <if test="record.sumFee != null">
        sum_fee = #{record.sumFee,jdbcType=DECIMAL},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.isDeleted != null">
        is_deleted = #{record.isDeleted,jdbcType=TINYINT},
      </if>
      <if test="record.remark != null">
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update injured_formula_log
    set id = #{record.id,jdbcType=BIGINT},
      regist_id = #{record.registId,jdbcType=BIGINT},
      claim_notification_no = #{record.claimNotificationNo,jdbcType=VARCHAR},
      company_id = #{record.companyId,jdbcType=BIGINT},
      fast_info_id = #{record.fastInfoId,jdbcType=BIGINT},
      damage_name = #{record.damageName,jdbcType=VARCHAR},
      damage_no = #{record.damageNo,jdbcType=VARCHAR},
      medical_fee = #{record.medicalFee,jdbcType=DECIMAL},
      renewal_fee = #{record.renewalFee,jdbcType=DECIMAL},
      nutrition_fee = #{record.nutritionFee,jdbcType=DECIMAL},
      income_fee = #{record.incomeFee,jdbcType=DECIMAL},
      nursing_fee = #{record.nursingFee,jdbcType=DECIMAL},
      traffic_fee = #{record.trafficFee,jdbcType=DECIMAL},
      sum_fee = #{record.sumFee,jdbcType=DECIMAL},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      is_deleted = #{record.isDeleted,jdbcType=TINYINT},
      remark = #{record.remark,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.injured.server.api.entity.InjuredFormulaLog">
    update injured_formula_log
    <set>
      <if test="registId != null">
        regist_id = #{registId,jdbcType=BIGINT},
      </if>
      <if test="claimNotificationNo != null">
        claim_notification_no = #{claimNotificationNo,jdbcType=VARCHAR},
      </if>
      <if test="companyId != null">
        company_id = #{companyId,jdbcType=BIGINT},
      </if>
      <if test="fastInfoId != null">
        fast_info_id = #{fastInfoId,jdbcType=BIGINT},
      </if>
      <if test="damageName != null">
        damage_name = #{damageName,jdbcType=VARCHAR},
      </if>
      <if test="damageNo != null">
        damage_no = #{damageNo,jdbcType=VARCHAR},
      </if>
      <if test="medicalFee != null">
        medical_fee = #{medicalFee,jdbcType=DECIMAL},
      </if>
      <if test="renewalFee != null">
        renewal_fee = #{renewalFee,jdbcType=DECIMAL},
      </if>
      <if test="nutritionFee != null">
        nutrition_fee = #{nutritionFee,jdbcType=DECIMAL},
      </if>
      <if test="incomeFee != null">
        income_fee = #{incomeFee,jdbcType=DECIMAL},
      </if>
      <if test="nursingFee != null">
        nursing_fee = #{nursingFee,jdbcType=DECIMAL},
      </if>
      <if test="trafficFee != null">
        traffic_fee = #{trafficFee,jdbcType=DECIMAL},
      </if>
      <if test="sumFee != null">
        sum_fee = #{sumFee,jdbcType=DECIMAL},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isDeleted != null">
        is_deleted = #{isDeleted,jdbcType=TINYINT},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.injured.server.api.entity.InjuredFormulaLog">
    update injured_formula_log
    set regist_id = #{registId,jdbcType=BIGINT},
      claim_notification_no = #{claimNotificationNo,jdbcType=VARCHAR},
      company_id = #{companyId,jdbcType=BIGINT},
      fast_info_id = #{fastInfoId,jdbcType=BIGINT},
      damage_name = #{damageName,jdbcType=VARCHAR},
      damage_no = #{damageNo,jdbcType=VARCHAR},
      medical_fee = #{medicalFee,jdbcType=DECIMAL},
      renewal_fee = #{renewalFee,jdbcType=DECIMAL},
      nutrition_fee = #{nutritionFee,jdbcType=DECIMAL},
      income_fee = #{incomeFee,jdbcType=DECIMAL},
      nursing_fee = #{nursingFee,jdbcType=DECIMAL},
      traffic_fee = #{trafficFee,jdbcType=DECIMAL},
      sum_fee = #{sumFee,jdbcType=DECIMAL},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      is_deleted = #{isDeleted,jdbcType=TINYINT},
      remark = #{remark,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>